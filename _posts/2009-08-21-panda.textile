---
layout: post
title: Panda
oneliner: A web framework and application that tracks student scores, projects, and certifications.
type: project
categories:
  - web
projecturl: http://panda.johnnytatlock.com
image:
  - src: /images/icons/panda.png
  - alt: A panda cub.
tags:
  - PHP
  - jQuery
  - MySQL
---

p. PANDA is actually two components, a web framework for creating pages with different functionality easily and extensibly, and extra code that is only meant to be used internally at "ITA":http://ita.wisc.edu (note: I have nothing to do with the public site).

p. I envision PANDA as being similar to Ruby on Rails, in the sense that RoR was extracted from "Basecamp":http://www.basecamphq.com/. I definitely don't plan on this being as popular, or having as great an effect on the web as RoR! But the idea is similar. 

p. The genesis of PANDA was a need for an easily maintainable, extensible system for managing test scores, projects, and the certifications that could be earned by a student. There was also a great impetus for me, as it was (and is) a great learning experience and challenge.

p. PANDA works very similar to "DokuWiki":http://www.dokuwiki.org, in that everything is routed through a central script, index.php. Each page in PANDA is actually a separate PHP class file, which upon instantiation runs whatever functions are needed specific to that page. There is also a separate JavaScript file and CSS file, to further organize. 

p. PANDA also has permissions per page, namespace, and user groups, allowing for pretty cool control over where users are allowed to go.

p. One of the best features of PANDA is the HTML helper functions. As each page of PANDA is a separate class, it's very tedious to keep escaping HTML, or drop out of PHP. In my opinion, it can make for very messy code. So PANDA lets you make a table row like this (the row is holding scores):

{% highlight php %}
echo row(2);
	echo cell_h(3, "Flash",	array('class' => 'topictitle'));
	echo cell(3, 90,	array('class' => 'btw score'));
	echo cell(3, 78.87,	array('class' => 'permit score'));
	echo cell(3, 80, 	array('class' => 'rt score'));
	echo cell(3, 248.87,	array('class' => 'total score'));
echo row_close(2);
{% endhighlight %}

p. The array argument at the end allows for any html attribute to be set to a value. Here's another example with a table cell containing a text input area:

{% highlight php %}
echo cell(3,
    input(4, 'text', 'nameIdOfInput', null, array(
	'maxlength' => '10',
	'size' => '10',
	'value' => 'some value',
	'class' => 'input class'), true),
    array('class' => 'cell class'));
{% endhighlight %}

p. The boolean argument determines if the input is enabled or disabled. While it may look confusing at first, it quickly makes for more organized code.

